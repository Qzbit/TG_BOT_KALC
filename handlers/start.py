import logging
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db_utils import add_user, is_subscription_active, get_subscription_status
from calculators.arcanum_number import calculate_arcanum_number, get_arcanum_description
from handlers.payment import create_payment
import re

logger = logging.getLogger(__name__)

def is_valid_date(date_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì."""
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é."""

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
        try:
            user_id = message.chat.id
            username = message.from_user.username or "Anonymous"
            status = "inactive"
            subscription_end = "1970-01-01"

            add_user(user_id, username, status, subscription_end)

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", callback_data="calculators"),
                InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe"),
                InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")
            )

            bot.send_message(
                message.chat.id,
                (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {username} –≤ –ú–∞—Ç—Ä–∏—Ü—É —á–∏—Å–µ–ª! üåå\n\n"
                    "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å. –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:\n"
                    "üî¢ –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏\n"
                    "üÉè –ê—Ä–∫–∞–Ω—ã –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
                    "‚≠êÔ∏è –ó–≤–µ–∑–¥—É –ü–∏—Ñ–∞–≥–æ—Ä–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ. üöÄ"
                ),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ 'send_welcome': {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data == "calculators")
    def show_calculators(call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤."""
        try:
            user_id = call.message.chat.id
            subscription_status, subscription_end = get_subscription_status(user_id)
            has_active_subscription = is_subscription_active(subscription_end)

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–ß–∏—Å–ª–æ –∞—Ä–∫–∞–Ω–æ–≤", callback_data="arcanum_number")
            )

            if has_active_subscription:
                keyboard.add(
                    InlineKeyboardButton("–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ–≥–æ –¥–Ω—è", callback_data="personal_day"),
                    InlineKeyboardButton("–ó–≤–µ–∑–¥–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞", callback_data="pythagoras"),
                    InlineKeyboardButton("–ß–∏—Å–ª–æ –±–æ–≥–∞—Ç—Å—Ç–≤–∞", callback_data="wealth")
                )
            else:
                keyboard.add(
                    InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")
                )

            keyboard.add(
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")
            )

            bot.edit_message_text(
                "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º.\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ 'show_calculators': {e}")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data == "main_menu")
    def show_main_menu(call):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é."""
        try:
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã", callback_data="calculators"),
                InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe"),
                InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")
            )

            bot.edit_message_text(
                (
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ç—Ä–∏—Ü—É —á–∏—Å–µ–ª! üåå\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ. üöÄ"
                ),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ 'show_main_menu': {e}")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.callback_query_handler(func=lambda call: call.data == "arcanum_number")
    def handle_arcanum(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä '–ß–∏—Å–ª–æ –∞—Ä–∫–∞–Ω–æ–≤'."""
        try:
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            bot.register_next_step_handler(call.message, process_arcanum)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ 'handle_arcanum': {e}")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def process_arcanum(message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–ª—è —á–∏—Å–ª–∞ –∞—Ä–∫–∞–Ω–æ–≤."""
        try:
            birth_date = message.text.strip()
            if not is_valid_date(birth_date):
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
                return

            arcanum_number = calculate_arcanum_number(birth_date)
            arcanum_description = get_arcanum_description(arcanum_number)

            bot.send_message(
                message.chat.id,
                f"–í–∞—à–µ —á–∏—Å–ª–æ –∞—Ä–∫–∞–Ω–æ–≤: {arcanum_number}\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {arcanum_description}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ 'process_arcanum': {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —á–∏—Å–ª–∞ –∞—Ä–∫–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
